{"version":3,"sources":["logo.svg","js/services/phoneService.js","screens/home/Home.jsx","components/phoneCard.jsx","App.js","serviceWorker.js","js/rootReducer.js","js/constants/actionTypes.js","js/store.js","index.js"],"names":["module","exports","PhoneService","this","service","axios","create","timeout","withCredentials","baseURL","get","then","res","data","catch","err","id","console","log","ConnectedHome","props","componentDidMount","fetchPhones","phones","dispatch","type","payload","render","ready","ListWrapper","length","Row","map","phone","Col","key","md","to","Img","src","imageFileName","style","margin","width","height","Spinner","animation","Component","slideIn","keyframes","styled","div","Home","connect","state","message","img","PhoneCard","useEffect","fetchPhoneByID","match","params","name","manufacturer","color","description","price","screen","ram","alt","App","exact","path","component","Boolean","window","location","hostname","initialState","rootReducer","action","store","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,gMC0B5BC,E,WAvBb,aAAe,oBACbC,KAAKC,QAAUC,IAAMC,OAAO,CAC1BC,QAAS,IACTC,iBAAiB,EACjBC,QAAS,0B,0DAKX,OAAON,KAAKC,QACTM,IAAI,UACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAChBC,OAAM,SAAAC,GAAG,OAAIA,O,qCAGHC,GACb,OAAOb,KAAKC,QACTM,IADI,gBACSM,IACbL,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAChBC,OAAM,SAAAC,GAAG,OAAIE,QAAQC,IAAIH,U,6iBCfhC,IAIMI,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRC,kBAAoB,WAClBJ,QAAQC,IAAI,eAEZ,EAAKd,QACFkB,cACAX,MAAK,SAAAY,GACJ,EAAKH,MAAMI,SAAS,CAAEC,KAAM,gBAAiBC,QAASH,OAEvDT,OAAM,SAAAC,GACLE,QAAQC,IAAIH,OAdC,EAkBnBY,OAAS,WAEP,OADAV,QAAQC,IAAI,EAAKE,OACV,EAAKA,MAAMQ,MAChB,oCACE,8CACA,kBAACC,EAAD,KACG,EAAKT,MAAMG,OAAOO,OAAS,GAC1B,kBAACC,EAAA,EAAD,KACG,EAAKX,MAAMG,OAAOS,KAAI,SAAAC,GACrB,OACE,kBAACC,EAAA,EAAD,CAAKC,IAAKF,EAAMjB,GAAIoB,GAAI,GACtB,kBAAC,IAAD,CAAMC,GAAE,UAAKJ,EAAMjB,KACjB,kBAACsB,EAAD,KACE,yBAAKC,IAAG,mBAAcN,EAAMO,0BAW9C,yBAAKC,MAAO,CAAEC,OAAQ,SAAUC,MAAO,QAASC,OAAQ,UACtD,kBAACC,EAAA,EAAD,CAASJ,MAAO,CAAEE,MAAO,QAASC,OAAQ,SAAWE,UAAU,WAzCnE,EAAK1C,QAAU,IAAIF,EAFF,E,2BADO6C,aAkDtBC,EAAUC,YAAH,KAQPpB,EAAcqB,IAAOC,IAAV,KAIXb,EAAMY,IAAOC,IAAV,IAWMH,GAIAI,EADFC,aAhFW,SAAAC,GACtB,MAAO,CAAE/B,OAAQ+B,EAAM/B,OAAQgC,QAASD,EAAMC,QAAS3B,MAAO0B,EAAM1B,SA+EzDyB,CAAyBlC,G,yGC3CtC,IAAMmB,EAAMY,IAAOM,IAAV,KAOMC,EAFGJ,aA5CM,SAAAC,GACtB,MAAO,CAAErB,MAAOqB,EAAMrB,MAAOsB,QAASD,EAAMC,QAAS3B,MAAO0B,EAAM1B,SA2ClDyB,EAxClB,SAA4BjC,GAa1B,GAZAsC,qBAAU,WAOR,OANgB,IAAIxD,GAEjByD,eAAevC,EAAMwC,MAAMC,OAAO7C,IAClCL,MAAK,SAAAC,GAAG,OAAIQ,EAAMI,SAAS,CAAEC,KAAM,gBAAiBC,QAASd,OAC7DE,OAAM,SAAAC,GAAG,OAAIE,QAAQC,IAAIH,MAErB,WACLK,EAAMI,SAAS,CAAEC,KAAM,gBAAiBC,QAAS,UAElD,IACHT,QAAQC,IAAIE,GACRA,EAAMa,MAAO,CAAC,IAAD,EACuEb,EAAMa,MAApF6B,EADO,EACPA,KAAMtB,EADC,EACDA,cAAeuB,EADd,EACcA,aAAcC,EAD5B,EAC4BA,MAAOC,EADnC,EACmCA,YAAaC,EADhD,EACgDA,MAAOC,EADvD,EACuDA,OAAQC,EAD/D,EAC+DA,IAE9E,OACE,6BACE,4BAAKN,GACL,kBAAC,EAAD,CAAKvB,IAAG,mBAAcC,GAAiB6B,IAAG,UAAKP,KAC/C,4BACE,2CAAiBC,GACjB,sCAAYC,GACZ,4BAAKC,GACL,uCAAaC,GACb,iDAAuBC,GACvB,gDAAsBC,KAK5B,OAAO,uC,sBCxBIE,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,OAAO7C,OAAQ,SAAAiC,GAAK,OAAI,kBAAC,EAASA,QCChCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2D,oBChBAkB,EAAe,CACnBvD,OAAQ,GACRU,MAAO,KACPsB,QAAS,GACT3B,OAAO,GAgBMmD,MAbf,WAAoD,IAC9CnD,EADe0B,EAA8B,uDAAtBwB,EAAcE,EAAQ,uCAEjD,OAAQA,EAAOvD,MACb,ICZyB,gBDcvB,OADAG,EAAQoD,EAAOtD,QAAQI,OAAS,EACzB,eAAKwB,EAAZ,CAAmB/B,OAAQyD,EAAOtD,QAASE,UAC7C,ICdyB,gBDevB,OAAO,eAAK0B,EAAZ,CAAmBrB,MAAO+C,EAAOtD,SAAWsD,EAAOtD,QAAQ,KAC7D,QACE,OAAO4B,IERE2B,GAR6B,qBAAXN,QAA0BA,OAAOO,sCAAyCC,IAE7FC,YACZL,EACA,CAAExD,OAAQ,GAAIK,OAAO,GACrB+C,OAAOU,8BAAgCV,OAAOU,iCCEhDC,IAAS3D,OACP,kBAAC,IAAD,CAAUsD,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJM,SAASC,eAAe,SJoHpB,kBAAmBC,WACrBA,UAAUC,cAAc9D,MAAMjB,MAAK,SAAAgF,GACjCA,EAAaC,kB","file":"static/js/main.f93d177e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\n\nclass PhoneService {\n  constructor() {\n    this.service = axios.create({\n      timeout: 10000,\n      withCredentials: true,\n      baseURL: \"http://localhost:5000\"\n    });\n  }\n\n  fetchPhones() {\n    return this.service\n      .get(\"phones\")\n      .then(res => res.data)\n      .catch(err => err);\n  }\n\n  fetchPhoneByID(id) {\n    return this.service\n      .get(`phone/${id}`)\n      .then(res => res.data)\n      .catch(err => console.log(err));\n  }\n}\n\nexport default PhoneService;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PhoneService from \"../../js/services/phoneService\";\nimport { Spinner, Col, Row } from \"react-bootstrap\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst mapStateToProps = state => {\n  return { phones: state.phones, message: state.message, ready: state.ready };\n};\n\nclass ConnectedHome extends Component {\n  constructor(props) {\n    super(props);\n    this.service = new PhoneService();\n  }\n\n  componentDidMount = () => {\n    console.log(\"dispatching\");\n\n    this.service\n      .fetchPhones()\n      .then(phones => {\n        this.props.dispatch({ type: \"UPDATE_PHONES\", payload: phones });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render = () => {\n    console.log(this.props);\n    return this.props.ready ? (\n      <>\n        <h1>List of phones</h1>\n        <ListWrapper>\n          {this.props.phones.length > 0 && (\n            <Row>\n              {this.props.phones.map(phone => {\n                return (\n                  <Col key={phone.id} md={4}>\n                    <Link to={`${phone.id}`}>\n                      <Img>\n                        <img src={`./images/${phone.imageFileName}`}></img>\n                      </Img>\n                    </Link>\n                  </Col>\n                );\n              })}\n            </Row>\n          )}\n        </ListWrapper>\n      </>\n    ) : (\n      <div style={{ margin: \"0 auto\", width: \"200px\", height: \"200px\" }}>\n        <Spinner style={{ width: \"200px\", height: \"200px\" }} animation=\"grow\" />\n      </div>\n    );\n  };\n}\n\nconst slideIn = keyframes`\n  0% {\n    transform: translateY(200px)\n  }\n  100% {\n    height: translateY(0)\n  }`;\n\nconst ListWrapper = styled.div`\n  margin: 100px 0;\n`;\n\nconst Img = styled.div`\n  img {\n    height: 400px;\n    width: auto;\n    transition: transform 1s;\n    &:hover {\n      z-index: -5000;\n      transform: scale(1.2);\n    }\n  }\n\n  animation: ${slideIn} 2s ease-out forwards;\n`;\n\nconst Home = connect(mapStateToProps)(ConnectedHome);\nexport default Home;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport PhoneService from \"../js/services/phoneService\";\n\nconst mapStateToProps = state => {\n  return { phone: state.phone, message: state.message, ready: state.ready };\n};\n\nfunction ConnectedPhoneCard(props) {\n  useEffect(() => {\n    const service = new PhoneService();\n    service\n      .fetchPhoneByID(props.match.params.id)\n      .then(res => props.dispatch({ type: \"GET_ONE_PHONE\", payload: res }))\n      .catch(err => console.log(err));\n\n    return () => {\n      props.dispatch({ type: \"GET_ONE_PHONE\", payload: null });\n    };\n  }, []);\n  console.log(props);\n  if (props.phone) {\n    const { name, imageFileName, manufacturer, color, description, price, screen, ram } = props.phone;\n\n    return (\n      <div>\n        <h2>{name}</h2>\n        <Img src={`./images/${imageFileName}`} alt={`${name}`} />\n        <ul>\n          <li>Fabricante: {manufacturer}</li>\n          <li>Color: {color}</li>\n          <li>{description}</li>\n          <li>Precio: {price}</li>\n          <li>Tipo de pantalla: {screen}</li>\n          <li>Cantidad de RAM: {ram}</li>\n        </ul>\n      </div>\n    );\n  } else {\n    return <h1>fuck</h1>;\n  }\n}\n\nconst Img = styled.img`\n  height: 400px;\n  width: auto;\n`;\n\nconst PhoneCard = connect(mapStateToProps)(ConnectedPhoneCard);\n\nexport default PhoneCard;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Home from \"./screens/home/Home\";\nimport Card from \"./components/phoneCard\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home}></Route>\n      <Route path=\"/:id\" render={match => <Card {...match}></Card>}></Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { UPDATE_PHONES, GET_ONE_PHONE } from \"./constants/actionTypes\";\n\nconst initialState = {\n  phones: [],\n  phone: null,\n  message: \"\",\n  ready: false\n};\n\nfunction rootReducer(state = initialState, action) {\n  let ready;\n  switch (action.type) {\n    case UPDATE_PHONES:\n      ready = action.payload.length > 0 ? true : false;\n      return { ...state, phones: action.payload, ready };\n    case GET_ONE_PHONE:\n      return { ...state, phone: action.payload && action.payload[0] };\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n","export const UPDATE_PHONES = \"UPDATE_PHONES\";\nexport const GET_ONE_PHONE = \"GET_ONE_PHONE\";\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./rootReducer\";\nconst composeEnhancers = (typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nconst store = createStore(\n  rootReducer,\n  { phones: [], ready: false },\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./js/store\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}